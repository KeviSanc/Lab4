#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Define the binary tree structure
struct TreeNode {
    int val;
    struct TreeNode* left;
    struct TreeNode* right;
};

// Recursive Approach
bool isMirror(struct TreeNode* t1, struct TreeNode* t2) {
    if (!t1 && !t2) return true;
    if (!t1 || !t2) return false;
    return (t1->val == t2->val) && 
           isMirror(t1->left, t2->right) && 
           isMirror(t1->right, t2->left);
}

bool isSymmetricRecursive(struct TreeNode* root) {
    if (!root) return true;
    return isMirror(root->left, root->right);
}

// Iterative Approach (Queue Simulation)
struct QueueNode {
    struct TreeNode* node1;
    struct TreeNode* node2;
    struct QueueNode* next;
};

void enqueue(struct QueueNode** head, struct TreeNode* node1, struct TreeNode* node2) {
    struct QueueNode* newNode = (struct QueueNode*)malloc(sizeof(struct QueueNode));
    newNode->node1 = node1;
    newNode->node2 = node2;
    newNode->next = *head;
    *head = newNode;
}

bool dequeue(struct QueueNode** head, struct TreeNode** node1, struct TreeNode** node2) {
    if (!*head) return false;
    struct QueueNode* temp = *head;
    *node1 = temp->node1;
    *node2 = temp->node2;
    *head = temp->next;
    free(temp);
    return true;
}

bool isSymmetricIterative(struct TreeNode* root) {
    if (!root) return true;

    struct QueueNode* queue = NULL;
    enqueue(&queue, root->left, root->right);

    while (queue) {
        struct TreeNode *node1, *node2;
        dequeue(&queue, &node1, &node2);

        if (!node1 && !node2) continue;
        if (!node1 || !node2) return false;
        if (node1->val != node2->val) return false;

        enqueue(&queue, node1->left, node2->right);
        enqueue(&queue, node1->right, node2->left);
    }

    return true;
}

void testSymmetry(struct TreeNode* root) {
    printf("Checking Symmetry using Recursive Approach: %s\n", isSymmetricRecursive(root) ? "Symmetric" : "Not Symmetric");
    printf("Checking Symmetry using Iterative Approach: %s\n", isSymmetricIterative(root) ? "Symmetric" : "Not Symmetric");
}
